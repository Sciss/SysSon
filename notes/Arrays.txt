::::: regarding ma2.Array layout :::::

ex. shape [2, 3, 4]

val a = ma2.Array.factory(ma2.DataType.INT, Array[Int](2, 3, 4))
(0 until a.size.toInt).foreach(i => a.setInt(i, i))


index  dim: 0  1  2
-------------------
 0          0  0  0
 1          0  0  1
 2          0  0  2
 3          0  0  3
 4          0  1  0
 5          0  1  1
 6          0  1  2
 7          0  1  3
 8          0  2  0
 9          0  2  1
10          0  2  2
11          0  2  3
12          1  0  0
13          1  0  1
14          1  0  2
15          1  0  3
16          1  1  0
17          1  1  1
18          1  1  2
19          1  1  3
20          1  2  0
21          1  2  1
22          1  2  2
23          1  2  3

Linear index corresponds to flat array getter methods and index iterator.

So with x, y, z being the indices of the successive dimensions, the linear index is

    x * (y_size * z*size) + y * (z_size) + z

Therefore, when the temporal unrolling dimension is dim 0, we can write the data straight into the AudioFile with numFrames = x_size and numChannels = y_size * z_size

If the temporal dimension dim_t is > 0, we can transpose the array (which is a cheap view-only operation):

val b = a.transpose(0, dim_t)

__Note__: b.getIndexIterator will produce the correct transposed sequence, while a.getInt(<idx>) does not care about transpositions but will interpret the index argument with respect to its unaltered backing array.

:::::::::::::::::::::::::

how does transposition affect the other dimensions. e.g. taking the above shape, the result of a.transpose(0, 1):

index      dim: 0  1  2
-----------------------
 0   0          0  0  0
 1   1          0  0  1
 2   2          0  0  2
 3   3          0  0  3
 4  12          1  0  0
 5  13          1  0  1
 6  14          1  0  2
 7  15          1  0  3
 8   4          0  1  0
 9   5          0  1  1
10   6          0  1  2
11   7          0  1  3
12  16          1  1  0
13  17          1  1  1
14  18          1  1  2
15  19          1  1  3
16   8          0  2  0
17   9          0  2  1
18  10          0  2  2
19  11          0  2  3
20  20          1  2  0
21  21          1  2  1
22  22          1  2  2
23  23          1  2  3

a.transpose(0, 2)

index      dim: 0  1  2
-----------------------
 0   0          0  0  0
 1  12          1  0  0
 2   4          0  1  0
 3  16          1  1  0
 4   8          0  2  0
 5  20          1  2  0
 6   1          0  0  1
 7  13          1  0  1
 8   5          0  1  1
 9  17          1  1  1
10   9          0  2  1
11  21          1  2  1
12   2          0  0  2
13  14          1  0  2
14   6          0  1  2
15  18          1  1  2
16  10          0  2  2
17  22          1  2  2
18   3          0  0  3
19  15          1  0  3
20   7          0  1  3
21  19          1  1  3
22  11          0  2  3
23  23          1  2  3

so the two columns are just switched. with x0, x1, ... xn, a transposition of x0 and xj
yields the new "depth first" traversal of xj, x1, ..., xj-1, x0, xj+1, ... xn
